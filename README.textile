h1. Rescator is a very simple Scala Json Rest Client API

bq. alpha version so should evolve quite a lot

For the time being, Rescator is *100% Scala* and is aimed at:
* *Calling Rest Json API in a very simple way*
* *Mapping received Json data to tuples using XPath-like syntax*
* No (_too_) weird operators

Rescator wraps the great Scala "dispatch library":https://github.com/dispatch/dispatch which is really powerful and designed in a fantastic way but quite _cryptic_ to use IMHO. Not being a Scala guru yet and loving clear code, I must admit that _dispatch_ relies too much on those weird operators (>~, >#, >-, >:>...) mixed with extreme functional syntax. It makes very concise code but quite difficult to read and to write for the basic developer. 
I love Scala in a whole but richness of an API relies not only on its intrinsic power but also on its simplicity of usage. Scala versatile syntax allows to provide simplicity so why not create simple APIs completely hiding its complex guts?
My aim is this one and even if I don't succeed, I'll try...

Here is a sample working code with this very draft code:

h2. Mapping Json to tuples

h3. Building a dispatch JsValue from a string 

bc.. import org.mandubian.rescator._
val js = JS(""" 
	{"child1" : {"child11" : {"child112" : "blabla"}}, 
	"child2" : {"child21" : 12345, "child22" : ["alpha", "beta", "delta"]}} 
""")

js: dispatch.json.JsValue = {"child1" : {"child11" : {"child112" : "blabla"}}, "child2" : {"child21" : 12345, "child22" : ["alpha", "beta", "delta"]}}


h3. Mapping a dispatch JsValue to a tuple

bc.. import org.mandubian.rescator._

val (child1, child112, child21, child22) = js >>>
		(	
		  'child1 as obj, 
		  'child1\'child11\'child112 as str,
		  'child2\'child21 as num,
		  'child2\'child22 as list
		)

shall return:
		
child1: Option[dispatch.json.JsObject] = Some({"child11" : {"child112" : "blabla"}})
child112: Option[String] = Some(blabla)
child21: Option[BigDecimal] = Some(12345)
child22: Option[List[dispatch.json.JsValue]] = Some(List("alpha", "beta", "delta"))

p. Please remark

* XPath based on symbols *'parent\'child* to get child node in JSON @{ parent : { child : "blabla" } }@

bq. why \ instead of / ? because // XPath expression will be added and // is a comment in Scala and Scala-XML also uses \

* *as* to tell the tuple mapper what is the expected type. Here are the accepted extractors coming:
** _str_ for a string
** _bool_ for a boolean
** _num_ for a number (parses a bigdecimal... _should provide int, float, double maybe???_
** _list_ for an array
** _obj_ for getting a complete _dispatch.json.JsObject_ and manage it yourself

* the result is a TupleN[Option[T]] so it means, if you give a bad JsonXPath, rescator shall put None in the tuple

h3. Mapping to a tuple with not found JsonXPath

bc.. import org.mandubian.rescator._

val (child1, child112, child21, child22) = js >>>
		(	
		  'child1 as obj, 
		  'child1\'child11\'child112 as list,
		  'child2\'child21 as str,
		  'child2\'child3 as num
		)

shall return:
		
child1: Option[dispatch.json.JsObject] = Some({"child11" : {"child112" : "blabla"}})
child112: Option[String] = Some(blabla)
child21: Option[BigDecimal] = Some(12345)
child22: Option[List[dispatch.json.JsValue]] = Some(List("alpha", "beta", "delta")) 

h2. Calling/mapping a GET Json API 

bc.. import org.mandubian.rescator._

val (query_obj, query_type, trim_place) = 
	GET("https://api.twitter.com/1/geo/search.json?query=Twitter%20HQ") >>> 
		(	
			'query as obj, 
			'query\'type as str, 
			'query\'params\'trim_place as bool
		)

p. 

* *GET("url")* to call an URL in GET mode (POST should come soon)
* *>>>* is quite easy to understand 

Here we are for the time being but more coming soon!

Have fun and don't hesitate to give ideas and contribute!
  
  

